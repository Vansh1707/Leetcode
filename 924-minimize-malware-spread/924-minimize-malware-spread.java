class Solution {
    int[]par,population;
    public int findpar(int u){
        return par[u]==u ? u : (par[u]=findpar(par[u]));
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n=graph.length;
        par=new int[n];
        population=new int[n];
        
        for(int i=0;i<n;i++){
            par[i]=i;
            population[i]=1;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]==0 ||i==j) continue;
                
                int p1=findpar(i),p2=findpar(j);
                if(p1!=p2){
                    par[p1]=p2;
                    population[p2]+=population[p1];
                }
            }
        }
        int[] infectedcount=new int[n];
        for(int ele:initial){
            int p=findpar(ele);
            infectedcount[p]++;
        }
        Arrays.sort(initial);
        int ans=initial[0];
        int maxpopulation=0;
        for(int ele:initial){
            int p=findpar(ele);
            if(infectedcount[p]==1 && population[p] > maxpopulation){
                maxpopulation=population[p];
                ans=ele;
            }
        }
        return ans;
    }
}